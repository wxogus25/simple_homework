{"version":3,"sources":["components/CityAir.js","App.js","serviceWorker.js","index.js"],"names":["CityAir","props","this","cityname","TableRow","TableCell","pm10","pm25","pm25grade","React","Component","Head","App","state","city_air","citys","completed","value","callApi1","a","async","fetch","response","json","body","callApi2","progress","setState","handleChange","event","cid","target","console","log","callApi3","then","res","catch","err","timer","setInterval","classes","className","name","size","onChange","map","c","id","Table","TableHead","TableBody","cityName","pm10Value","pm25Value","colSpan","align","CircularProgress","variant","withStyles","theme","margin","spacing","unit","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.553d455a.chunk.js","sourcesContent":["import React from 'react';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\n\r\nfunction pm10grade(props){\r\n    if(props < 31){\r\n        return '좋음';\r\n    }else if(props < 81){\r\n        return '보통';\r\n    }else if(props < 151){\r\n        return '나쁨';\r\n    }else{\r\n        return '매우나쁨';\r\n    }\r\n}\r\n\r\nfunction pm25grade(props){\r\n    if(props < 16){\r\n        return '좋음';\r\n    }else if(props < 51){\r\n        return '보통';\r\n    }else if(props < 101){\r\n        return '나쁨';\r\n    }else{\r\n        return '매우나쁨';\r\n    }\r\n}\r\n\r\nclass CityAir extends React.Component{\r\n    render() {\r\n        if(this.props.cityname == 0)\r\n            return;\r\n        return(\r\n            <TableRow>\r\n            <TableCell>{this.props.cityname}</TableCell>\r\n            <TableCell>{this.props.pm10}</TableCell>\r\n            <TableCell>{pm10grade(this.props.pm10)}</TableCell>\r\n            <TableCell>{this.props.pm25}</TableCell>\r\n            <TableCell>{pm25grade(this.props.pm25)}</TableCell>\r\n            </TableRow>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CityAir;","import React, { Component } from 'react';\nimport CityAir from './components/CityAir';\nimport './App.css';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableBody from '@material-ui/core/TableBody';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { withStyles } from '@material-ui/core/styles';\n\n\nconst styles = theme => ({\n  progress: {\n    margin: theme.spacing.unit *2\n  }\n});\n\nfunction Head(props) {\n  return (\n    <div>\n      <h1>시도별 실시간 미세먼지 측정정보 조회 서비스</h1>\n      <p>이 사이트는 선택한 지역의 미세먼지 지수를 실시간으로 알려줍니다.</p>\n    </div>\n  );\n}\n\nvar temp;\n\nclass App extends Component {\n  state = {\n    city_air: \"\",\n    citys: \"\",\n    completed: 0,\n    value: ''\n  }\n\n  componentDidMount() {\n    this.timer = setInterval(this.progress, 20);\n    this.callApi1()\n      .then(res => this.setState({citys: res}))\n      .catch(err => console.log(err));\n    this.callApi2()\n      .then(res => this.setState({city_air: res}))\n      .catch(err => console.log(err));\n  }\n\n  callApi1 = async() => {\n    const response = await fetch('/region');\n    const body = await response.json();\n    return body;\n  }\n\n  callApi2 = async() => {\n    const response = await fetch(\"/test?id=0\");\n    const body = await response.json();\n    return body;\n  }\n\n  progress = () => {\n    const { completed } = this.state;\n    this.setState({ completed: completed >= 100 ? 0 : completed + 1});\n  }\n\n  handleChange = (event) => {\n    var cid=event.target.value;\n    console.log(cid);\n    if(cid == '0')\n      return;\n    \n    this.callApi3(cid)\n      .then(res => this.setState({city_air: res}))\n      // .then(res => this.setState({city_air: xmlToJson.parse(res)}))\n      .catch(err => console.log(err));\n  }\n\n  callApi3 = async(cid) => {\n    const response = await fetch('/test?id='+cid);\n    const body = await response.json();\n    return body;\n  }\n\n  render(){   \n    const { classes } = this.props;\n    return (\n      <div className=\"App\">\n        <header className = \"App-header\">\n          <Head />\n\n          <select name='city' value={this.state.value} size ='1' onChange={this.handleChange}>\n            <option value='0'>선택</option>\n            {this.state.citys ? this.state.citys.map(c => { return ( <option value={c.id}>{c.name}</option> );}) : <p>asdf</p>}\n          </select>\n\n        </header>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>지역</TableCell>\n              <TableCell>미세먼지(PM10)</TableCell>\n              <TableCell>미세먼지 등급(좋음~매우나쁨)</TableCell>\n              <TableCell>초미세먼지(PM2.5)</TableCell>\n              <TableCell>초미세먼지 등급(좋음~매우나쁨)</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {this.state.city_air ? this.state.city_air.map(c => { return ( <CityAir cityname={c.cityName} pm10={c.pm10Value} pm25={c.pm25Value}/> );}) \n            : <TableRow>\n                <TableCell colSpan=\"5\" align=\"center\">\n                  <CircularProgress className={classes.progress} variant=\"determinate\" value={this.state.completed}/>\n                </TableCell>\n              </TableRow>\n            }\n          </TableBody>\n        </Table>\n        <p>출처: 한국환경공단_대기오염정보 Open API</p>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}